generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String                      @id @default(uuid())
  email         String                      @unique
  name          String?
  bio           String?
  image         String?
  password      String
  createdAt     DateTime                    @default(now())
  updatedAt     DateTime                    @updatedAt
  deletedAt     DateTime?
  location      String?                     @default("")
  occupation    String?                     @default("")
  viewedProfile Int                         @default(0)
  posts         Post[]
  otherProfiles otherProfilesUserRelation[]
  following     User[]                      @relation("UserToUser")
  followers     User[]                      @relation("UserToUser")
  message       Message[]
  chats         Chat[]                      @relation("Users")
  adminChats    Chat[]                      @relation("Admins")

  @@index([email])
}

model otherProfilesUserRelation {
  id               String @id @default(uuid())
  userId           String
  otherProfileLink String
  userRelation     User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Post {
  id        String    @id @default(uuid())
  content   String    @db.VarChar(1000)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  authorId  String
  image     String?
  author    User      @relation(fields: [authorId], references: [id])

  @@index([authorId])
}

model Chat {
  id          String    @id @default(uuid())
  chatName    String    @default("")
  isGroupChat Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]    @relation("Users")
  groupAdmins User[]    @relation("Admins")
  messages    Message[] @relation("Messages")

  @@index([chatName])
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chatId    String
  authorId  String
  chat      Chat     @relation("Messages", fields: [chatId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])

  @@index([chatId])
  @@index([authorId])
}

model Admins {
  A String
  B String

  @@unique([A, B], map: "_Admins_AB_unique")
  @@index([B], map: "_Admins_B_index")
  @@map("_Admins")
}

model UserToUser {
  A String
  B String

  @@unique([A, B], map: "_UserToUser_AB_unique")
  @@index([B], map: "_UserToUser_B_index")
  @@map("_UserToUser")
}

model Users {
  A String
  B String

  @@unique([A, B], map: "_Users_AB_unique")
  @@index([B], map: "_Users_B_index")
  @@map("_Users")
}
